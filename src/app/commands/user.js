const { Composer, Bot } = require("grammy");
const { InlineKeyboard, InputFile } = require("grammy");
const { CONSTANTS } = require("../constans/user");
const {
  checkAndCreateNewUser,
  setWantToPayTariff,
  checkIsCourseClosed,
  setChoosedCourse,
  getChoosedCourse,
  getChoosedCourseAndPaymentStatus,
  isRecruitmentOpened,
} = require("../../db/models/user/functions");
const { userKeyboards } = require("../keyboards/user");
const { userMessages } = require("../messages/user");
const User = require("../../db/models/user/user");
const {
  getParticipantsFirstQueue,
} = require("../../db/models/course/functions");
const {
  addUserToReminder,
  removeUserFromReminder,
} = require("../../db/models/reminder/functions");
const { getCoursesInfo, getAllCollections } = require("../xlsx");
const { createAndUploadFile } = require("../replicator");
const { getCallbackChatAndMessageId } = require("../functions");

const bot = new Bot(process.env.BOT_TOKEN);

const user = new Composer();

// add –≤—ñ–¥–≥—É–∫–∏ and –ø—Ä–∏–∫–ª–∞–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
user.command("start", async (ctx) => {
  await checkAndCreateNewUser(ctx);

  await ctx.reply(CONSTANTS.GREETINGS, {
    reply_markup: userKeyboards.mainMenu,
  });
});

user.command("tariffs", async (ctx) => {
  await ctx.reply(
    `*${CONSTANTS.TARIFF_PLANS}*\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞—Ä–∏—Ñ–Ω—ñ –ø–ª–∞–Ω–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫—É—Ä—Å—ñ–≤.`,
    {
      reply_markup: userKeyboards.tariffPlans,
      parse_mode: "Markdown",
    }
  );
});

user.callbackQuery("backTariffPlans", async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation
  await ctx.deleteMessage();
  await ctx.reply(
    `*${CONSTANTS.TARIFF_PLANS}*\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞—Ä–∏—Ñ–Ω—ñ –ø–ª–∞–Ω–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫—É—Ä—Å—ñ–≤.`,
    {
      reply_markup: userKeyboards.tariffPlans,
      parse_mode: "Markdown",
    }
  );
});

user.command("profile", async (ctx) => {
  const me = await User.findOne({ userId: ctx.from.id });

  const getPaymentStatus = (status) => {
    switch (status) {
      case "unpaid":
        return "‚õîÔ∏è –ù–µ —Å–ø–ª–∞—á–µ–Ω–æ";
      case "pending":
        return "‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è";
      case "paid":
        return "‚úÖ–°–ø–ª–∞—á–µ–Ω–æ";
    }
  };

  const ID = me.userId;
  const userName = me.userName.length
    ? `\n*User name*: \`${me.userName}\``
    : "";
  const firstName = me.firstName.length
    ? `\n*First name*: \`${me.firstName}\``
    : "";
  const lastName = me.lastName.length
    ? `\n*Last name*: \`${me.lastName}\``
    : "";
  const fullName = me.fullName.length
    ? `\n*–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ*: \`${me.fullName}\``
    : "";
  const questionary = me.questionary.length
    ? `\n*–ü—Ä–æ –º–µ–Ω–µ*: \`${me.questionary}\``
    : "";
  const paymentStatus = getPaymentStatus(me.paymentStatus);

  ctx.reply(
    `*ID*: \`${ID}\`${userName}${firstName}${lastName}${fullName}\n*–û–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å*: \`${me.choosedCourse.toUpperCase()}\`\n*–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É*: \`${paymentStatus}\`${questionary}`,
    {
      parse_mode: "Markdown",
    }
  );
});

user.command("payment", async (ctx) => {
  const isOpened = await isRecruitmentOpened();
  if (!isOpened) {
    return await ctx.reply("–í–∏–±–∞—á—Ç–µ, –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–±—ñ—Ä –Ω–∞ –∫—É—Ä—Å–∏ –∑–∞—á–∏–Ω–µ–Ω–æ.");
  }

  await ctx.reply(
    `*${CONSTANTS.MY_PAYMENT}\n\n*–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–∞—Ä–∏—Ñ –∑–∞ —è–∫–∏–º –í–∏ –±–∞–∂–∞—î—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.`,
    {
      reply_markup: userKeyboards.tariffsMenu,
      parse_mode: "Markdown",
    }
  );
});

// get rid of lower case
user.callbackQuery(/chooseTariff/, async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation

  const tariff = ctx.callbackQuery.data.substring(12);
  const { chat_id, message_id } = getCallbackChatAndMessageId(ctx);

  const isClosed = await checkIsCourseClosed(ctx, tariff.toLowerCase());
  if (isClosed) return;

  await ctx.editMessageText(
    `${CONSTANTS.MY_PAYMENT} ‚û°Ô∏è *${CONSTANTS[`TARIFF_${tariff}`]}*`,
    {
      chat_id,
      message_id,
      reply_markup: userKeyboards[`singleTariff${tariff}Menu`],
      parse_mode: "Markdown",
    }
  );
});

user.callbackQuery(/returnTariff/, async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation

  const tariff = ctx.callbackQuery.data.substring(12);
  const { chat_id, message_id } = getCallbackChatAndMessageId(ctx);

  await ctx.editMessageText(
    `${CONSTANTS.MY_PAYMENT} ‚û°Ô∏è *${CONSTANTS[`TARIFF_${tariff}`]}*`,
    {
      chat_id,
      message_id,
      reply_markup: userKeyboards[`singleTariff${tariff}Menu`],
      parse_mode: "Markdown",
    }
  );
});

user.callbackQuery(/payNow/, async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation

  const tariff = ctx.callbackQuery.data.substring(6);
  const { userId, chat_id, message_id } = getCallbackChatAndMessageId(ctx);

  await setChoosedCourse(userId, tariff.toLowerCase());

  const isSucess = await setWantToPayTariff(ctx);

  if (!isSucess) {
    return;
  }

  await ctx.editMessageText(userMessages[`requisitesMessage${tariff}`], {
    chat_id,
    message_id,
    reply_markup: userKeyboards[`requisites${tariff}Menu`],
    parse_mode: "HTML",
  });
});

user.callbackQuery(/remind[A-Z][1-9]/, async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation
  
  const tariff = ctx.callbackQuery.data.substring(6);
  const { chat_id } = getCallbackChatAndMessageId(ctx);

  await addUserToReminder(chat_id, tariff);
  // message that succesfully added to reminder? send message or owerite?

  await ctx.reply("‚úÖ –ú–∏ –í–∞–º –Ω–∞–≥–∞–¥–∞—î–º–æ –ø—Ä–æ —Å–ø–ª–∞—Ç—É.");
});

user.callbackQuery("notRemind", async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation

  const { chat_id } = getCallbackChatAndMessageId(ctx);

  await removeUserFromReminder(chat_id);
  // message that succesfully added to reminder? send message or owerite?

  await ctx.reply("–ú–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º–æ –í–∞–º –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ —Å–ø–ª–∞—Ç—É üòâ");
});

user.callbackQuery("backTariffs", async (ctx) => {
  await ctx.answerCallbackQuery(); // remove loading animation

  const { chat_id, message_id } = getCallbackChatAndMessageId(ctx);

  await ctx.editMessageText(
    `*${CONSTANTS.MY_PAYMENT}\n\n*–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–∞—Ä–∏—Ñ –∑–∞ —è–∫–∏–º –í–∏ –±–∞–∂–∞—î—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.`,
    {
      chat_id,
      message_id,
      reply_markup: userKeyboards.tariffsMenu,
      parse_mode: "Markdown",
    }
  );
});

// receives only photo with caption
// only private chat
user.on(":photo", async (ctx) => {
  const {choosedCourse, paymentStatus} = await getChoosedCourseAndPaymentStatus(ctx);
  const isChoosedCourse = Boolean(choosedCourse.length);

  if (!isChoosedCourse) {
    await ctx.reply(
      `–í–∏–±–∞—á—Ç–µ, –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å. –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ–±—Ä–∞—Ç–∏ –∫—É—Ä—Å –ø–µ—Ä–µ–π–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –ø—É–Ω–∫—Ç—É \"*${CONSTANTS.MY_PAYMENT}*\" —ñ –æ–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫—É—Ä—Å.`,
      {
        parse_mode: "Markdown",
      }
    );
    return;
  }

  if (paymentStatus === "paid") {
    await ctx.reply(
      `–í–∏ –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –æ–¥–Ω–æ–≥–æ –∑ –∫—É—Ä—Å—ñ–≤.`,
      {
        parse_mode: "Markdown",
      }
    );
    return;
  }

  const caption = ctx?.update?.message?.caption;

  if (!Boolean(caption)) {
    await ctx.reply(CONSTANTS.NO_PHOTO_CAPTION);
    return;
  }

  const approvePay = new InlineKeyboard()
    .text("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", `paid${ctx.from.id}`)
    .text("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É", `denied${ctx.from.id}`)
    .row();

  await ctx.api.sendPhoto(
    process.env.BOT_ADMIN_ID,
    ctx.update.message.photo[ctx.update.message.photo.length - 1].file_id,
    {
      caption: `–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${caption}`,
      reply_markup: approvePay,
    }
  );

  await User.findOneAndUpdate(
    { userId: ctx.from.id },
    { $set: { paymentStatus: "pending" } }
  );

  await createAndUploadFile({
    sender: caption,
    userId: ctx.from.id,
    fileId: ctx.update.message.photo[ctx.update.message.photo.length - 1].file_id,
    data: null,
    type:'check',
    folder: 'checks'
  });

  const now = new Date();
  if ((now.getUTCHours() <= 6) || (now.getUTCHours() >= 18)) {
    await ctx.reply("–í–∏–±–∞—á—Ç–µ, –Ω–∞—à —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –ú–∏ –ø–æ—Å—Ç–∞—Ä–∞—î–º–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –í–∞–º —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ.")
  }

  await ctx.reply("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—Ä–∏–º–∞–≤ —Ñ–æ—Ç–æ —á–µ–∫—É. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
});

user.command("certificate", async (ctx) => {
  const chat_id = ctx.update.message.chat.id;

  await bot.api.sendDocument(
    chat_id,
    new InputFile("src/files/certificate.pdf", "–ü—Ä–∏–∫–ª–∞–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É.pdf"),
    {
      caption: "–ü—Ä–∏–∫–ª–∞–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É, —è–∫–∏–π –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –∫—É—Ä—Å—É.",
    }
  );
});

user.command(
  "reviews",
  (ctx) =>
    ctx.reply(
      `–ó–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –í–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏ –ø—Ä–æ –Ω–∞—Å.`,
      {
        reply_markup: userKeyboards.reviewsButton,
        parse_mode: "Markdown",
      }
    )
  // maybe send message with some description?
);

user.command(
  "support",
  // send contact or just link?
  async (ctx) => {
    const now = new Date();
    if ((now.getUTCHours() <= 6) || (now.getUTCHours() >= 18)) {
      await ctx.reply("–í–∏–±–∞—á—Ç–µ, –Ω–∞—à —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –ú–∏ –ø–æ—Å—Ç–∞—Ä–∞—î–º–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –í–∞–º —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ.")
    }

    await ctx.replyWithContact("+380505736797", "Vadym");
    await ctx.reply(
      "–Ø–∫—â–æ —É –í–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è, –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    );
  }
  // ctx.reply("[–°–≤—è–∑—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º](tg://user?id=306726408)", {
  //   parse_mode: 'Markdown'
  // })
);

module.exports = user;
