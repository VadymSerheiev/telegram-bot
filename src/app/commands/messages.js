const { Composer, Bot } = require("grammy");
const { InlineKeyboard, InputFile } = require("grammy");
const { CONSTANTS } = require("../constans/user");
const {
  checkAndCreateNewUser,
  setWantToPayTariff,
  checkIsCourseClosed,
  setChoosedCourse,
  getChoosedCourse,
  getChoosedCourseAndPaymentStatus,
  isRecruitmentOpened,
} = require("../../db/models/user/functions");
const { userKeyboards } = require("../keyboards/user");
const { userMessages } = require("../messages/user");
const User = require("../../db/models/user/user");
const {
  getParticipantsFirstQueue,
} = require("../../db/models/course/functions");
const {
  addUserToReminder,
  removeUserFromReminder,
} = require("../../db/models/reminder/functions");
const { getCoursesInfo, getAllCollections } = require("../xlsx");
const { getCallbackChatAndMessageId, uploadFile } = require("../functions");

const bot = new Bot(process.env.BOT_TOKEN);

const messages = new Composer();

messages.on("message", async (ctx) => {
  if (ctx?.update?.message?.text === CONSTANTS.TARIFF_PLANS) {
    ctx.reply(
      `*${CONSTANTS.TARIFF_PLANS}*\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞—Ä–∏—Ñ–Ω—ñ –ø–ª–∞–Ω–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫—É—Ä—Å—ñ–≤.`,
      {
        reply_markup: userKeyboards.tariffPlans,
        parse_mode: "Markdown",
      }
    );

    return;
  }

  if (ctx?.update?.message?.text === CONSTANTS.MY_PAYMENT) {
    const isOpened = await isRecruitmentOpened();
    if (!isOpened) {
      return await ctx.reply("–í–∏–±–∞—á—Ç–µ, –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–±—ñ—Ä –Ω–∞ –∫—É—Ä—Å–∏ –∑–∞—á–∏–Ω–µ–Ω–æ.");
    }

    ctx.reply(
      `*${CONSTANTS.MY_PAYMENT}\n\n*–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–∞—Ä–∏—Ñ –∑–∞ —è–∫–∏–º –í–∏ –±–∞–∂–∞—î—Ç–µ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É.`,
      {
        reply_markup: userKeyboards.tariffsMenu,
        parse_mode: "Markdown",
      }
    );

    return;
  }

  if (ctx?.update?.message?.text === CONSTANTS.MY_PROFILE) {
    const me = await User.findOne({ userId: ctx.from.id });

    const getPaymentStatus = (status) => {
      switch (status) {
        case "unpaid":
          return "‚õîÔ∏è –ù–µ —Å–ø–ª–∞—á–µ–Ω–æ";
        case "pending":
          return "‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è";
        case "paid":
          return "‚úÖ –°–ø–ª–∞—á–µ–Ω–æ";
      }
    };

    const ID = me.userId;
    const userName = me.userName.length
      ? `\n*User name*: \`${me.userName}\``
      : "";
    const firstName = me.firstName.length
      ? `\n*First name*: \`${me.firstName}\``
      : "";
    const lastName = me.lastName.length
      ? `\n*Last name*: \`${me.lastName}\``
      : "";
    const fullName = me.fullName.length
      ? `\n*–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ*: \`${me.fullName}\``
      : "";
    const course = me.choosedCourse.length
      ? `\n*–û–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å*: \`${me.choosedCourse.toUpperCase()}\``
      : "\n*–û–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å*: `‚ûñ –ù–µ –æ–±—Ä–∞–Ω–æ`";
    const questionary = me.questionary.length
      ? `\n*–ü—Ä–æ –º–µ–Ω–µ*: \`${me.questionary}\``
      : "";
    const paymentStatus = me.choosedCourse.length
      ? `\n*–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É*: \`${getPaymentStatus(me.paymentStatus)}\``
      : "";

    ctx.reply(
      `*ID*: \`${ID}\`${userName}${firstName}${lastName}${fullName}${course}${paymentStatus}${questionary}`,
      {
        parse_mode: "Markdown",
      }
    );

    return;
  }

  if (ctx?.update?.message?.text === CONSTANTS.SUPPORT) {
    const now = new Date();
    if ((now.getUTCHours() <= 6) || (now.getUTCHours() >= 18)) {
      await ctx.reply("–í–∏–±–∞—á—Ç–µ, –Ω–∞—à —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –ú–∏ –ø–æ—Å—Ç–∞—Ä–∞—î–º–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –í–∞–º —è–∫–æ–º–æ–≥–∞ —à–≤–∏–¥—à–µ.")
    }

    await ctx.replyWithContact("+380505736797", "Vadym");
    await ctx.reply(
      "–Ø–∫—â–æ —É –í–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è, –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    );

    return;
  }

  if (ctx?.update?.message?.text === CONSTANTS.CERTIFICATE) {
    const chat_id = ctx.update.message.chat.id;

    await bot.api.sendDocument(
      chat_id,
      new InputFile("src/files/certificate.pdf", "–ü—Ä–∏–∫–ª–∞–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É.pdf"),
      {
        caption: "–ü—Ä–∏–∫–ª–∞–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É, —è–∫–∏–π –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –∫—É—Ä—Å—É.",
      }
    );

    return;
  }

  if (ctx?.update?.message?.text === CONSTANTS.REVIEWS) {
    await ctx.reply(
      `–ó–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –í–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏ –ø—Ä–æ –Ω–∞—Å.`,
      {
        reply_markup: userKeyboards.reviewsButton,
        parse_mode: "Markdown",
      }
    );

    return;
  }

  if (
    ctx?.update?.message?.reply_to_message?.text.includes(CONSTANTS.FULL_NAME)
  ) {
    const fullName = ctx?.update?.message?.text;
    await User.findOneAndUpdate(
      { userId: ctx.from.id },
      { $set: { fullName: fullName } }
    );

    await ctx.reply(CONSTANTS.QUESTIONARY);

    return;
  }

  if (
    ctx?.update?.message?.reply_to_message?.text.includes(CONSTANTS.QUESTIONARY)
  ) {
    const { questionary } = await User.findOne({ userId: ctx.from.id });
    await User.findOneAndUpdate(
      { userId: ctx.from.id },
      { $set: { questionary: `${Boolean(questionary.length) ? `${questionary} ${ctx?.update?.message?.text}` : `${ctx?.update?.message?.text}`}` } }
    );

    if (!questionary.length) {
      ctx.reply("–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å üòâ");
    } else {
      ctx.reply("–ß–∏–º –±—ñ–ª—å—à–µ –º–∏ –ø—Ä–æ —Ç–µ–±–µ –¥—ñ–∑–Ω–∞—î–º–æ—Å—å, —Ç–∏–º –∫—Ä–∞—â–µ üòâ");
    }

    return;
  }

  if (
    ["Certificate", "StructureA1", "StructureA2", "StructureB1"].some(
      (element) => element === ctx?.update?.message?.reply_to_message?.text
    )
  ) {
    // if (!ctx?.update?.message?.text.includes('https://')) {
    //   await ctx.reply("–í–∏–±–∞—á—Ç–µ, –í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª.");
    // }

    // function to upload
    await uploadFile(
      ctx?.update?.message?.text,
      ctx?.update?.message?.reply_to_message?.text
    );

    await ctx.reply("‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");

    return;
  }

  await ctx.reply(
    "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ ü§∑‚Äç‚ôÇÔ∏è –ú–æ–∂–ª–∏–≤–æ –í–∏ —Ö–æ—Ç—ñ–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —è–∫–µ—Å—å –º–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?"
  );
});

module.exports = messages;
